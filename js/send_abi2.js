// üì¶ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –ø–æ–¥–∫–ª—é—á–∏ ethers.js –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏: npm install ethers
const { ethers } = require("ethers");

async function callSweepToken() {
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Metamask
  const provider = new ethers.providers.Web3Provider(window.ethereum);
  await provider.send("eth_requestAccounts", []);
  const signer = provider.getSigner();

  // ‚úÖ –£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
  const contractAddress = "0x7A68bD26dAc2ba7973eC1532450E54443242Ea08"; // ‚Üê –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –≥–¥–µ –µ—Å—Ç—å sweepToken()
  const tokenAddress = "0x8abC5d2a0C346f55BbEc5488B2d93d87E9EF69bA"; // ‚Üê –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (ERC20), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ ‚Äú–∑–∞—á–∏—Å—Ç–∏—Ç—å‚Äù

  // ABI —Å —Ñ—É–Ω–∫—Ü–∏–µ–π sweepToken
  const abi = [
    "function setDetectionBot(address detectionBotAddress)"
  ];

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  const contract = new ethers.Contract(contractAddress, abi, signer);

  // –í—ã–∑—ã–≤–∞–µ–º sweepToken(tokenAddress)
  const tx = await contract.setDetectionBot(tokenAddress);
  await tx.wait();

  console.log("‚úÖ sweepToken –≤—ã–∑–≤–∞–Ω–∞, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:", tx.hash);
}

callSweepToken();
